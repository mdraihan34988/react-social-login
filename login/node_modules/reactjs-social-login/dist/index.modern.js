import React, { memo, useState, useEffect, useCallback } from 'react';

var JS_SRC = 'https://assets.loginwithamazon.com/sdk/na/login1.js';
var SCRIPT_ID = 'amazon-login';
var _window = window;
var LoginSocialAmazon = memo(function (_ref) {
  var _ref$state = _ref.state,
      state = _ref$state === void 0 ? 'DCEeFWf45A53sdfKef424' : _ref$state,
      client_id = _ref.client_id,
      className = _ref.className,
      redirect_uri = _ref.redirect_uri,
      _ref$scope = _ref.scope,
      scope = _ref$scope === void 0 ? 'profile' : _ref$scope,
      _ref$scope_data = _ref.scope_data,
      scope_data = _ref$scope_data === void 0 ? {
    profile: {
      essential: false
    }
  } : _ref$scope_data,
      _ref$response_type = _ref.response_type,
      response_type = _ref$response_type === void 0 ? 'token' : _ref$response_type,
      children = _ref.children,
      onReject = _ref.onReject,
      onResolve = _ref.onResolve;

  var _useState = useState(false),
      isSdkLoaded = _useState[0],
      setIsSdkLoaded = _useState[1];

  var _useState2 = useState(false),
      isProcessing = _useState2[0],
      setIsProcessing = _useState2[1];

  useEffect(function () {
    !isSdkLoaded && load();
  }, [isSdkLoaded]);
  var checkIsExistsSDKScript = useCallback(function () {
    return !!document.getElementById(SCRIPT_ID);
  }, []);
  var insertScriptGoogle = useCallback(function (d, s, id, jsSrc, cb) {
    if (s === void 0) {
      s = 'script';
    }

    var ggScriptTag = d.createElement(s);
    ggScriptTag.id = id;
    ggScriptTag.src = jsSrc;
    ggScriptTag.async = true;
    ggScriptTag.defer = true;
    var scriptNode = document.getElementsByTagName('script')[0];
    scriptNode && scriptNode.parentNode && scriptNode.parentNode.insertBefore(ggScriptTag, scriptNode);
    ggScriptTag.onload = cb;
  }, []);
  var handleResponse = useCallback(function (res) {
    setIsProcessing(false);
    onResolve({
      provider: 'amazon',
      data: res
    });
  }, [onResolve]);
  var handleError = useCallback(function (err) {
    setIsProcessing(false);
    onReject(err);
  }, [onReject]);
  var load = useCallback(function () {
    if (checkIsExistsSDKScript()) {
      setIsSdkLoaded(true);
    } else {
      insertScriptGoogle(document, 'script', SCRIPT_ID, JS_SRC, function () {
        _window.amazon.Login.setClientId(client_id);

        setIsSdkLoaded(true);
      });
    }
  }, [checkIsExistsSDKScript, client_id, insertScriptGoogle]);
  var onLogin = useCallback(function () {
    if (isProcessing || !isSdkLoaded) return;
    setIsProcessing(true);

    if (!_window.amazon) {
      setIsProcessing(false);
      load();
      onReject("Google SDK isn't loaded!");
    } else {
      _window.amazon.Login.authorize({
        scope: scope,
        scope_data: scope_data,
        response_type: response_type,
        redirect_uri: redirect_uri,
        state: state
      }, function (res) {
        if (res.error) handleError(res.error);else handleResponse(res);
      });
    }
  }, [load, state, scope, onReject, scope_data, isSdkLoaded, handleError, redirect_uri, isProcessing, response_type, handleResponse]);
  return React.createElement("div", {
    className: className,
    onClick: onLogin
  }, children);
});

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var SDK_URL = 'https://connect.facebook.net/en_EN/sdk.js';
var SCRIPT_ID$1 = 'facebook-jssdk';
var _window$1 = window;
var LoginSocialFacebook = memo(function (_ref) {
  var appId = _ref.appId,
      _ref$scope = _ref.scope,
      scope = _ref$scope === void 0 ? 'email,public_profile' : _ref$scope,
      _ref$state = _ref.state,
      state = _ref$state === void 0 ? true : _ref$state,
      _ref$xfbml = _ref.xfbml,
      xfbml = _ref$xfbml === void 0 ? true : _ref$xfbml,
      _ref$cookie = _ref.cookie,
      cookie = _ref$cookie === void 0 ? true : _ref$cookie,
      _ref$version = _ref.version,
      version = _ref$version === void 0 ? 'v2.7' : _ref$version,
      _ref$language = _ref.language,
      language = _ref$language === void 0 ? 'en_EN' : _ref$language,
      _ref$auth_type = _ref.auth_type,
      auth_type = _ref$auth_type === void 0 ? '' : _ref$auth_type,
      className = _ref.className,
      onReject = _ref.onReject,
      onResolve = _ref.onResolve,
      redirect_uri = _ref.redirect_uri,
      _ref$fieldsProfile = _ref.fieldsProfile,
      fieldsProfile = _ref$fieldsProfile === void 0 ? 'name, email, birthday' : _ref$fieldsProfile,
      _ref$response_type = _ref.response_type,
      response_type = _ref$response_type === void 0 ? 'code' : _ref$response_type,
      _ref$return_scopes = _ref.return_scopes,
      return_scopes = _ref$return_scopes === void 0 ? true : _ref$return_scopes,
      children = _ref.children;

  var _useState = useState(false),
      isSdkLoaded = _useState[0],
      setIsSdkLoaded = _useState[1];

  var _useState2 = useState(false),
      isProcessing = _useState2[0],
      setIsProcessing = _useState2[1];

  useEffect(function () {
    !isSdkLoaded && load();
  }, [isSdkLoaded]);
  var insertSDKScript = useCallback(function (document, cb) {
    var fbScriptTag = document.createElement('script');
    fbScriptTag.id = SCRIPT_ID$1;
    fbScriptTag.src = SDK_URL;
    var scriptNode = document.getElementsByTagName('script')[0];
    scriptNode && scriptNode.parentNode && scriptNode.parentNode.insertBefore(fbScriptTag, scriptNode);
    cb();
  }, []);
  var checkIsExistsSDKScript = useCallback(function () {
    return !!document.getElementById(SCRIPT_ID$1);
  }, []);
  var initFbSDK = useCallback(function (config, document) {
    var _window = window;

    _window.fbAsyncInit = function () {
      _window.FB && _window.FB.init(_extends({}, config));
      setIsSdkLoaded(true);
      var fbRoot = document.getElementById('fb-root');

      if (!fbRoot) {
        fbRoot = document.createElement('div');
        fbRoot.id = 'fb-root';
        document.body.appendChild(fbRoot);
      }
    };
  }, []);
  var getMe = useCallback(function (authResponse) {
    _window$1.FB.api('/me', {
      locale: language,
      fields: fieldsProfile
    }, function (me) {
      onResolve({
        provider: 'facebook',
        data: _extends({}, authResponse, me)
      });
    });
  }, [fieldsProfile, language, onResolve]);
  var handleResponse = useCallback(function (response) {
    if (response.authResponse) {
      getMe(response.authResponse);
    } else {
      onReject(response);
    }

    setIsProcessing(false);
  }, [getMe, onReject]);
  var load = useCallback(function () {
    if (checkIsExistsSDKScript()) {
      setIsSdkLoaded(true);
    } else {
      insertSDKScript(document, function () {
        initFbSDK({
          appId: appId,
          xfbml: xfbml,
          version: version,
          state: state,
          cookie: cookie,
          redirect_uri: redirect_uri,
          response_type: response_type
        }, document);
      });
    }
  }, [state, appId, xfbml, cookie, version, initFbSDK, redirect_uri, response_type, insertSDKScript, checkIsExistsSDKScript]);
  var loginFB = useCallback(function () {
    if (isProcessing || !isSdkLoaded) return;
    setIsProcessing(true);

    if (!_window$1.FB) {
      setIsProcessing(false);
      load();
      onReject("Fb isn't loaded!");
    } else {
      _window$1.FB.login(handleResponse, {
        scope: scope,
        return_scopes: return_scopes,
        auth_type: auth_type
      });
    }
  }, [load, scope, onReject, auth_type, isSdkLoaded, isProcessing, return_scopes, handleResponse]);
  return React.createElement("div", {
    className: className,
    onClick: loginFB
  }, children);
});

var SCOPE = '';
var JS_SRC$1 = 'https://apis.google.com/js/api.js';
var SCRIPT_ID$2 = 'google-login';
var _window$2 = window;
var LoginSocialGoogle = memo(function (_ref) {
  var client_id = _ref.client_id,
      _ref$scope = _ref.scope,
      scope = _ref$scope === void 0 ? 'email profile' : _ref$scope,
      _ref$prompt = _ref.prompt,
      prompt = _ref$prompt === void 0 ? 'select_account' : _ref$prompt,
      ux_mode = _ref.ux_mode,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      _ref$login_hint = _ref.login_hint,
      login_hint = _ref$login_hint === void 0 ? '' : _ref$login_hint,
      _ref$access_type = _ref.access_type,
      access_type = _ref$access_type === void 0 ? 'online' : _ref$access_type,
      onReject = _ref.onReject,
      onResolve = _ref.onResolve,
      _ref$redirect_uri = _ref.redirect_uri,
      redirect_uri = _ref$redirect_uri === void 0 ? '/' : _ref$redirect_uri,
      _ref$cookie_policy = _ref.cookie_policy,
      cookie_policy = _ref$cookie_policy === void 0 ? 'single_host_origin' : _ref$cookie_policy,
      _ref$hosted_domain = _ref.hosted_domain,
      hosted_domain = _ref$hosted_domain === void 0 ? '' : _ref$hosted_domain,
      _ref$discoveryDocs = _ref.discoveryDocs,
      discoveryDocs = _ref$discoveryDocs === void 0 ? '' : _ref$discoveryDocs,
      children = _ref.children,
      _ref$fetch_basic_prof = _ref.fetch_basic_profile,
      fetch_basic_profile = _ref$fetch_basic_prof === void 0 ? true : _ref$fetch_basic_prof;

  var _useState = useState(false),
      isSdkLoaded = _useState[0],
      setIsSdkLoaded = _useState[1];

  var _useState2 = useState(false),
      isProcessing = _useState2[0],
      setIsProcessing = _useState2[1];

  useEffect(function () {
    !isSdkLoaded && load();
  }, [isSdkLoaded]);
  var checkIsExistsSDKScript = useCallback(function () {
    return !!document.getElementById(SCRIPT_ID$2);
  }, []);
  var insertScriptGoogle = useCallback(function (d, s, id, jsSrc, cb) {
    if (s === void 0) {
      s = 'script';
    }

    var ggScriptTag = d.createElement(s);
    ggScriptTag.id = id;
    ggScriptTag.src = jsSrc;
    ggScriptTag.async = true;
    ggScriptTag.defer = true;
    var scriptNode = document.getElementsByTagName('script')[0];
    scriptNode && scriptNode.parentNode && scriptNode.parentNode.insertBefore(ggScriptTag, scriptNode);
    ggScriptTag.onload = cb;
  }, []);
  var handleResponse = useCallback(function (res) {
    setIsProcessing(false);
    var data = {
      provider_id: undefined,
      data: {}
    };
    Object.values(res).filter(function (item) {
      return typeof item === 'string' || (item === null || item === void 0 ? void 0 : item.access_token);
    }).forEach(function (item) {
      typeof item === 'string' ? data.provider_id = item : data.data = item;
    });
    onResolve({
      provider: 'google',
      data: data
    });
  }, [onResolve]);
  var handleError = useCallback(function (err) {
    setIsProcessing(false);
    onReject(err);
  }, [onReject]);
  var load = useCallback(function () {
    if (checkIsExistsSDKScript()) {
      setIsSdkLoaded(true);
    } else {
      insertScriptGoogle(document, 'script', SCRIPT_ID$2, JS_SRC$1, function () {
        var params = {
          client_id: client_id,
          cookie_policy: cookie_policy,
          login_hint: login_hint,
          hosted_domain: hosted_domain,
          fetch_basic_profile: fetch_basic_profile,
          discoveryDocs: discoveryDocs,
          ux_mode: ux_mode,
          redirect_uri: redirect_uri,
          access_type: access_type,
          scope: SCOPE,
          immediate: true
        };

        _window$2.gapi.load('auth2', function () {
          var gapiAuth = _window$2.gapi.auth2;
          !gapiAuth.getAuthInstance() ? gapiAuth.init(params).then(function () {
            setIsSdkLoaded(true);
          }) : onReject('not exist an instance');
        });
      });
    }
  }, [ux_mode, onReject, client_id, login_hint, access_type, redirect_uri, discoveryDocs, cookie_policy, hosted_domain, insertScriptGoogle, fetch_basic_profile, checkIsExistsSDKScript]);
  var loginGoogle = useCallback(function () {
    if (isProcessing || !isSdkLoaded) return;
    setIsProcessing(true);

    if (!_window$2.gapi) {
      setIsProcessing(false);
      load();
      onReject("Google SDK isn't loaded!");
    } else {
      var auth2 = _window$2.gapi.auth2.getAuthInstance();

      var options = {
        prompt: prompt,
        scope: scope,
        ux_mode: ux_mode
      };
      auth2.signIn(options).then(handleResponse)["catch"](handleError);
    }
  }, [load, scope, prompt, ux_mode, onReject, handleError, isSdkLoaded, isProcessing, handleResponse]);
  return React.createElement("div", {
    className: className,
    onClick: loginGoogle
  }, children);
});

var GITHUB_URL = 'https://github.com';
var LoginSocialGithub = memo(function (_ref) {
  var _ref$state = _ref.state,
      state = _ref$state === void 0 ? 'DCEeFWf45A53sdfKef424' : _ref$state,
      _ref$scope = _ref.scope,
      scope = _ref$scope === void 0 ? 'repo,gist' : _ref$scope,
      client_id = _ref.client_id,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      redirect_uri = _ref.redirect_uri,
      _ref$allow_signup = _ref.allow_signup,
      allow_signup = _ref$allow_signup === void 0 ? false : _ref$allow_signup,
      children = _ref.children,
      onResolve = _ref.onResolve;

  var _useState = useState(false),
      isProcessing = _useState[0],
      setIsProcessing = _useState[1];

  useEffect(function () {
    var popupWindowURL = new URL(window.location.href);
    var code = popupWindowURL.searchParams.get('code');
    var state = popupWindowURL.searchParams.get('state');

    if (state !== null && state !== void 0 && state.includes('_github') && code) {
      localStorage.setItem('github', code);
      window.close();
    }
  }, []);
  var onChangeLocalStorage = useCallback(function () {
    window.removeEventListener('storage', onChangeLocalStorage, false);
    var code = localStorage.getItem('github');

    if (code) {
      setIsProcessing(true);
      handlePostMessage({
        provider: 'github',
        type: 'code',
        code: code
      });
      localStorage.removeItem('instagram');
    }
  }, []);
  var getAccessToken = useCallback(function (code) {
    setIsProcessing(false);
    onResolve({
      provider: 'github',
      data: {
        code: code
      }
    });
  }, [onResolve]);
  var handlePostMessage = useCallback(function (_ref2) {
    var type = _ref2.type,
        code = _ref2.code,
        provider = _ref2.provider;

    try {
      return Promise.resolve(type === 'code' && provider === 'github' && code && getAccessToken(code));
    } catch (e) {
      return Promise.reject(e);
    }
  }, [getAccessToken]);
  var onLogin = useCallback(function () {
    if (!isProcessing) {
      window.addEventListener('storage', onChangeLocalStorage, false);
      var oauthUrl = GITHUB_URL + "/login/oauth/authorize?client_id=" + client_id + "&scope=" + scope + "&state=" + (state + '_github') + "&redirect_uri=" + redirect_uri + "&allow_signup=" + allow_signup;
      var width = 450;
      var height = 730;
      var left = window.screen.width / 2 - width / 2;
      var top = window.screen.height / 2 - height / 2;
      window.open(oauthUrl, 'Github', 'menubar=no,location=no,resizable=no,scrollbars=no,status=no, width=' + width + ', height=' + height + ', top=' + top + ', left=' + left);
    }
  }, [isProcessing, client_id, scope, state, redirect_uri, allow_signup]);
  return React.createElement("div", {
    className: className,
    onClick: onLogin
  }, children);
});

var INSTAGRAM_URL = 'https://api.instagram.com';
var LoginSocialInstagram = memo(function (_ref) {
  var _ref$state = _ref.state,
      state = _ref$state === void 0 ? 'DCEeFWf45A53sdfKef424' : _ref$state,
      client_id = _ref.client_id,
      className = _ref.className,
      redirect_uri = _ref.redirect_uri,
      _ref$scope = _ref.scope,
      scope = _ref$scope === void 0 ? 'user_profile,user_media' : _ref$scope,
      _ref$response_type = _ref.response_type,
      response_type = _ref$response_type === void 0 ? 'code' : _ref$response_type,
      children = _ref.children,
      onResolve = _ref.onResolve;

  var _useState = useState(false),
      isProcessing = _useState[0],
      setIsProcessing = _useState[1];

  useEffect(function () {
    var popupWindowURL = new URL(window.location.href);
    var code = popupWindowURL.searchParams.get('code');
    var state = popupWindowURL.searchParams.get('state');

    if (state !== null && state !== void 0 && state.includes('_instagram') && code) {
      localStorage.setItem('instagram', code);
      window.close();
    }
  }, []);
  var onChangeLocalStorage = useCallback(function () {
    window.removeEventListener('storage', onChangeLocalStorage, false);
    var code = localStorage.getItem('instagram');

    if (code) {
      setIsProcessing(true);
      handlePostMessage({
        provider: 'instagram',
        type: 'code',
        code: code
      });
      localStorage.removeItem('instagram');
    }
  }, []);
  var getAccessToken = useCallback(function (code) {
    setIsProcessing(false);
    onResolve({
      provider: 'instagram',
      data: {
        code: code
      }
    });
  }, [onResolve]);
  var handlePostMessage = useCallback(function (_ref2) {
    var type = _ref2.type,
        code = _ref2.code,
        provider = _ref2.provider;

    try {
      return Promise.resolve(type === 'code' && provider === 'instagram' && code && getAccessToken(code));
    } catch (e) {
      return Promise.reject(e);
    }
  }, [getAccessToken]);
  var onLogin = useCallback(function () {
    if (!isProcessing) {
      window.addEventListener('storage', onChangeLocalStorage, false);
      var oauthUrl = INSTAGRAM_URL + "/oauth/authorize?response_type=" + response_type + "&client_id=" + client_id + "&scope=" + scope + "&state=" + (state + '_instagram') + "&redirect_uri=" + redirect_uri;
      var width = 450;
      var height = 730;
      var left = window.screen.width / 2 - width / 2;
      var top = window.screen.height / 2 - height / 2;
      window.open(oauthUrl, 'Instagram', 'menubar=no,location=no,resizable=no,scrollbars=no,status=no, width=' + width + ', height=' + height + ', top=' + top + ', left=' + left);
    }
  }, [isProcessing, client_id, redirect_uri, response_type, scope, state]);
  return React.createElement("div", {
    className: className,
    onClick: onLogin
  }, children);
});

var MICROSOFT_URL = 'https://login.microsoftonline.com';
var MICROSOFT_API_URL = 'https://graph.microsoft.com';
var LoginSocialMicrosoft = memo(function (_ref) {
  var _ref$tenant = _ref.tenant,
      tenant = _ref$tenant === void 0 ? 'common' : _ref$tenant,
      _ref$state = _ref.state,
      state = _ref$state === void 0 ? 'DCEeFWf45A53sdfKef424' : _ref$state,
      client_id = _ref.client_id,
      className = _ref.className,
      redirect_uri = _ref.redirect_uri,
      _ref$scope = _ref.scope,
      scope = _ref$scope === void 0 ? 'profile openid email' : _ref$scope,
      _ref$response_type = _ref.response_type,
      response_type = _ref$response_type === void 0 ? 'code' : _ref$response_type,
      _ref$response_mode = _ref.response_mode,
      response_mode = _ref$response_mode === void 0 ? 'query' : _ref$response_mode,
      children = _ref.children,
      _ref$code_challenge = _ref.code_challenge,
      code_challenge = _ref$code_challenge === void 0 ? '19cfc47c216dacba8ca23eeee817603e2ba34fe0976378662ba31688ed302fa9' : _ref$code_challenge,
      _ref$code_challenge_m = _ref.code_challenge_method,
      code_challenge_method = _ref$code_challenge_m === void 0 ? 'plain' : _ref$code_challenge_m,
      _ref$prompt = _ref.prompt,
      prompt = _ref$prompt === void 0 ? 'select_account' : _ref$prompt,
      onReject = _ref.onReject,
      onResolve = _ref.onResolve;

  var _useState = useState(false),
      isProcessing = _useState[0],
      setIsProcessing = _useState[1];

  useEffect(function () {
    var popupWindowURL = new URL(window.location.href);
    var code = popupWindowURL.searchParams.get('code');
    var state = popupWindowURL.searchParams.get('state');

    if (state !== null && state !== void 0 && state.includes('_microsoft') && code) {
      localStorage.setItem('microsoft', code);
      window.close();
    }
  }, []);
  var onChangeLocalStorage = useCallback(function () {
    window.removeEventListener('storage', onChangeLocalStorage, false);
    var code = localStorage.getItem('microsoft');

    if (code) {
      setIsProcessing(true);
      handlePostMessage({
        provider: 'microsoft',
        type: 'code',
        code: code
      });
      localStorage.removeItem('microsoft');
    }
  }, []);
  var getProfile = useCallback(function (data) {
    fetch(MICROSOFT_API_URL + "/v1.0/me", {
      method: 'GET',
      headers: {
        Authorization: "Bearer " + data.access_token
      }
    }).then(function (res) {
      return res.json();
    }).then(function (res) {
      setIsProcessing(false);
      onResolve({
        provider: 'microsoft',
        data: _extends({}, res, data)
      });
    })["catch"](function (err) {
      setIsProcessing(false);
      onReject(err);
    });
  }, [onReject, onResolve]);
  var getAccessToken = useCallback(function (code) {
    var params = {
      code: code,
      scope: scope,
      client_id: client_id,
      redirect_uri: redirect_uri,
      code_verifier: code_challenge,
      grant_type: 'authorization_code'
    };
    var headers = new Headers({
      'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'
    });
    fetch(MICROSOFT_URL + "/" + tenant + "/oauth2/v2.0/token", {
      method: 'POST',
      headers: headers,
      body: new URLSearchParams(params)
    }).then(function (response) {
      return response.json();
    }).then(function (data) {
      if (data.access_token) getProfile(data);else {
        setIsProcessing(false);
        onReject('no data');
      }
    })["catch"](function (err) {
      setIsProcessing(false);
      onReject(err);
    });
  }, [scope, tenant, onReject, client_id, getProfile, redirect_uri, code_challenge]);
  var handlePostMessage = useCallback(function (_ref2) {
    var type = _ref2.type,
        code = _ref2.code,
        provider = _ref2.provider;

    try {
      return Promise.resolve(type === 'code' && provider === 'microsoft' && code && getAccessToken(code));
    } catch (e) {
      return Promise.reject(e);
    }
  }, [getAccessToken]);
  var onLogin = useCallback(function () {
    if (!isProcessing) {
      window.addEventListener('storage', onChangeLocalStorage, false);
      var oauthUrl = MICROSOFT_URL + "/" + tenant + "/oauth2/v2.0/authorize?client_id=" + client_id + "\n        &response_type=" + response_type + "\n        &redirect_uri=" + redirect_uri + "\n        &response_mode=" + response_mode + "\n        &scope=" + scope + "\n        &state=" + (state + '_microsoft') + "\n        &prompt=" + prompt + "\n        &code_challenge=" + code_challenge + "\n        &code_challenge_method=" + code_challenge_method;
      var width = 450;
      var height = 730;
      var left = window.screen.width / 2 - width / 2;
      var top = window.screen.height / 2 - height / 2;
      window.open(oauthUrl, 'Microsoft', 'menubar=no,location=no,resizable=no,scrollbars=no,status=no, width=' + width + ', height=' + height + ', top=' + top + ', left=' + left);
    }
  }, [scope, state, tenant, prompt, client_id, isProcessing, redirect_uri, response_mode, response_type, code_challenge, code_challenge_method]);
  return React.createElement("div", {
    className: className,
    onClick: onLogin
  }, children);
});

var LINKEDIN_URL = 'https://www.linkedin.com';
var LoginSocialLinkedin = memo(function (_ref) {
  var _ref$state = _ref.state,
      state = _ref$state === void 0 ? 'DCEeFWf45A53sdfKef424' : _ref$state,
      _ref$scope = _ref.scope,
      scope = _ref$scope === void 0 ? 'r_liteprofile' : _ref$scope,
      client_id = _ref.client_id,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      redirect_uri = _ref.redirect_uri,
      _ref$response_type = _ref.response_type,
      response_type = _ref$response_type === void 0 ? 'code' : _ref$response_type,
      children = _ref.children,
      onResolve = _ref.onResolve;

  var _useState = useState(false),
      isProcessing = _useState[0],
      setIsProcessing = _useState[1];

  useEffect(function () {
    var popupWindowURL = new URL(window.location.href);
    var code = popupWindowURL.searchParams.get('code');
    var state = popupWindowURL.searchParams.get('state');

    if (state !== null && state !== void 0 && state.includes('_linkedin') && code) {
      localStorage.setItem('linkedin', code);
      window.close();
    }
  }, []);
  var onChangeLocalStorage = useCallback(function () {
    window.removeEventListener('storage', onChangeLocalStorage, false);
    var code = localStorage.getItem('linkedin');

    if (code) {
      setIsProcessing(true);
      handlePostMessage({
        provider: 'linkedin',
        type: 'code',
        code: code
      });
      localStorage.removeItem('linkedin');
    }
  }, []);
  var getAccessToken = useCallback(function (code) {
    setIsProcessing(false);
    onResolve({
      provider: 'linkedin',
      data: {
        code: code
      }
    });
  }, [onResolve]);
  var handlePostMessage = useCallback(function (_ref2) {
    var type = _ref2.type,
        code = _ref2.code,
        provider = _ref2.provider;

    try {
      return Promise.resolve(type === 'code' && provider === 'linkedin' && code && getAccessToken(code));
    } catch (e) {
      return Promise.reject(e);
    }
  }, [getAccessToken]);
  var onLogin = useCallback(function () {
    if (!isProcessing) {
      window.addEventListener('storage', onChangeLocalStorage, false);
      var oauthUrl = LINKEDIN_URL + "/oauth/v2/authorization?response_type=" + response_type + "&client_id=" + client_id + "&scope=" + scope + "&state=" + (state + '_linkedin') + "&redirect_uri=" + redirect_uri;
      var width = 450;
      var height = 730;
      var left = window.screen.width / 2 - width / 2;
      var top = window.screen.height / 2 - height / 2;
      window.open(oauthUrl, 'Linkedin', 'menubar=no,location=no,resizable=no,scrollbars=no,status=no, width=' + width + ', height=' + height + ', top=' + top + ', left=' + left);
    }
  }, [isProcessing, client_id, redirect_uri, response_type, scope, state]);
  return React.createElement("div", {
    className: className,
    onClick: onLogin
  }, children);
});

export { LoginSocialAmazon, LoginSocialFacebook, LoginSocialGithub, LoginSocialGoogle, LoginSocialInstagram, LoginSocialLinkedin, LoginSocialMicrosoft };
//# sourceMappingURL=index.modern.js.map
